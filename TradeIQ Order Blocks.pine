// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© ClayeWeight

// Based on : Sonarlabs - Order Block Finder
// Modified by: oddc
//
// Remarks:
//  - Add the original indicator from Sonarlabs on the main chart so you can see the order blocks
//  - Add this modified version to the chart keeping overlay=false
//  - Because OB's need to be drawn for the script to work, you need to change the scale of the window below the main chart manually
//    so that only the lables and signals are visible (and boxes kept outside of visible range)

//@version=5

indicator(title='TradeIQ Order Blocks', shorttitle='TradeIQ OB', overlay=false, max_labels_count=500)

_v = input.string("1.0.2", title="Version", options=["1.0.2"], group="Sonarlab.io", tooltip="This is a free script based on our premium Smart Money Concepts (SMC) indicator. Get a free trial of our SMC indicator by visiting our website.\nhttps://www.sonarlab.io")
sens = input.int(28, minval=1, title='Sensitivity', group='Order Block', tooltip='Lower the sensitivity to show more order blocks. A higher sensitivity will show less order blocks.')
sens /= 100

// OB
OBMitigationType = input.string("Close", title="OB Mitigation Type", options=["Close", "Wick"], group="Order Block", tooltip="Choose how Order Blocks are mitigated")
OBBullMitigation = OBMitigationType=="Close" ? close[1] : low
OBBearMitigation = OBMitigationType=="Close" ? close[1] : high
//max_OB_count = input.int(20, title="Max OB count", group="Order Block")

// Strategy
min_touches = input.int(1, title="Minimum number of touches to launch signa", group="Strategy")

//OB Colors
col_bullish = input.color(#5db49e, title="Bullish OB Border", inline="a", group="Order Block")
col_bullish_ob = input.color(color.new(#64C4AC, 85), title="Background", inline="a", group="Order Block")
col_bearish = input.color(#4760bb, title="Bearish OB Border", inline="b", group="Order Block")
col_bearish_ob = input.color(color.new(#506CD3, 85), title="Background", inline="b", group="Order Block")

// // Alerts
// buy_alert = input.bool(title='Buy Signal', defval=true, group='Alerts', tooltip='An alert will be sent when price goes below the top of a bullish order block.')
// sell_alert = input.bool(title='Sell Signal', defval=true, group='Alerts', tooltip='An alert will be sent when price goes above the bottom of a bearish order block.')

// Declaring Variables and Arrays
bool ob_created = false
bool ob_created_bull = false
var int cross_index = na
bool buy_signal = false
bool sell_signal = false
var box drawlongBox = na
var longBoxes = array.new_box()
var longBoxesTouchCount = array.new_int()
var box drawShortBox = na
var shortBoxes = array.new_box()
var shortBoxesTouchCount = array.new_int()

// variables used to debug...
// short_OB_count = 0
draw_OB = true
clean_OB = true
clean_OB_label = false
draw_OB_label = false
draw_touch_label = false

// Custom Rate of Change (ROC) calculation. This is to calculate high momentum moves in the market.
pc = (open - open[4]) / open[4] * 100

// If the ROC crossover our Sensitivty input - Then create an Order Block
// Sensitivty is negative as this is a Bearish OB
if ta.crossunder(pc, -sens)
    ob_created := true
    cross_index := bar_index

// If the ROC crossover our Sensitivty input - Then create an Order Block
if ta.crossover(pc, sens)
    ob_created_bull := true
    cross_index := bar_index

// By default buy_signal is 0
buy_signal := false
sell_signal := false


// -------------------------------
// Bearish OB Creation
// -------------------------------
// Check if we should create a OB, Also check if we haven't created an OB in the last 5 candles.
if ob_created and cross_index - cross_index[1] > 5
    float last_green = 0
    float highest = 0
    // Loop through the most recent candles and find the first GREEN (Bullish) candle. We will place our OB here.
    for i = 4 to 15 by 1
        if close[i] > open[i]
            last_green := i
            break
    // Draw our OB on that candle - then push the box into our box arrays.
    if draw_OB
        drawShortBox := box.new(left=bar_index[last_green], top=high[last_green], bottom=low[last_green], right=bar_index[last_green], bgcolor=col_bearish_ob, border_color=col_bearish, extend=extend.right)
        array.push(shortBoxes, drawShortBox)
        array.push(shortBoxesTouchCount, 0)
    if draw_OB_label
        OB_label = label.new(bar_index[last_green], 0, "OB", style=label.style_label_up, size=size.small, color=color.red)

// -------------------------------
// Bullish OB Creation
// -------------------------------
// Check if we should create a OB, Also check if we haven't created an OB in the last 5 candles.
if ob_created_bull and cross_index - cross_index[1] > 5
    float last_red = 0
    float highest = 0
    // Loop through the most recent candles and find the first RED (Bearish) candle. We will place our OB here.
    for i = 4 to 15 by 1
        if close[i] < open[i]
            last_red := i
            break
    // Draw our OB on that candle - then push the box into our box arrays.
    if draw_OB
        drawlongBox := box.new(left=bar_index[last_red], top=high[last_red], bottom=low[last_red], right=bar_index[last_red], bgcolor=col_bullish_ob, border_color=col_bullish, extend=extend.right)
        array.push(longBoxes, drawlongBox)
        array.push(longBoxesTouchCount, 0)
    if draw_OB_label
        OB_label = label.new(bar_index[last_red], 0, "OB", style=label.style_label_up, size=size.small, color=color.green)

// -------------------------------
// Clean OB's
// -------------------------------

// ----------------- Clean Bearish Order Block -------------------
// Clean up OB boxes
if array.size(shortBoxes) > 0 // if there are bearish OB's...
    for i = array.size(shortBoxes) - 1 to 0 by 1 // loop through them...
        sbox = array.get(shortBoxes, i)
        top = box.get_top(sbox)
        bot = box.get_bottom(sbox)
        // If the two last closes are above the high of the bearish OB - Remove the OB
        if OBBearMitigation > top and clean_OB_label
            label.new(bar_index, low, "cleaned", style=label.style_label_up, size=size.small, color=color.green)
        if OBBearMitigation > top and clean_OB
            array.remove(shortBoxes, i)
            array.remove(shortBoxesTouchCount, i)
            box.delete(sbox)

// ----------------- Clean Bullish Clean Up -------------------
// Clean up OB boxes
if array.size(longBoxes) > 0
    for i = array.size(longBoxes) - 1 to 0 by 1
        sbox = array.get(longBoxes, i)
        bot = box.get_bottom(sbox)
        top = box.get_top(sbox)
        // If the two last closes are below the low of the bullish OB - Remove the OB
        if OBBullMitigation < bot and clean_OB_label
            label.new(bar_index, low, "cleaned", style=label.style_label_up, size=size.small, color=color.red) 
        if OBBullMitigation < bot and clean_OB 
            array.remove(longBoxes, i)
            array.remove(longBoxesTouchCount, i)
            box.delete(sbox)

// -------------------------------
// Check if price touches OB
// -------------------------------

// ----------------- Check Bearish OBs -------------------
if array.size(shortBoxes) > 0
    for i = array.size(shortBoxes) - 1 to 0 by 1
        sbox = array.get(shortBoxes, i)
        bot = box.get_bottom(sbox)
        top = box.get_top(sbox)

        // If the last high is below, the current low inside and not above then we have a signal to sell
        if high[1] < bot and high <= top and high > bot
            array.set(shortBoxesTouchCount, i, array.get(shortBoxesTouchCount, i)+1)
            label.new(bar_index, 0, str.tostring(array.get(shortBoxesTouchCount, i)), style=label.style_label_up, size=size.small, color=color.orange)
            alert('Sell', alert.freq_once_per_bar)
            if array.get(shortBoxesTouchCount, i) >= min_touches
                sell_signal := true

// ----------------- Check Bullish OBs -------------------
if array.size(longBoxes) > 0
    for i = array.size(longBoxes) - 1 to 0 by 1
        sbox = array.get(longBoxes, i)
        bot = box.get_bottom(sbox)
        top = box.get_top(sbox)

        // If the last low is above, the current low inside and not below then we have a signal to buy
        if low[1] > top and low <= top and low > bot
            // label.new(bar_index, low, "touch", style=label.style_label_up, size=size.small, color=color.orange)
            array.set(longBoxesTouchCount, i, array.get(longBoxesTouchCount, i)+1)
            alert('Buy', alert.freq_once_per_bar)
            buy_signal := true


// -------------------------------
// Draw signal and generate alert
// -------------------------------

plot(buy_signal ? 500 : 0, "OB Buy Signal", color=color.green)
plot(sell_signal ? -500 : 0, "OB Sell Signal", color=color.red)

alertcondition(buy_signal, "OB Buy Signal")
alertcondition(sell_signal, "OB Sell Signal")